// Code generated by MockGen. DO NOT EDIT.
// Source: models/post.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/vinhut/posted/models"
	reflect "reflect"
)

// MockPostDatabase is a mock of PostDatabase interface
type MockPostDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockPostDatabaseMockRecorder
}

// MockPostDatabaseMockRecorder is the mock recorder for MockPostDatabase
type MockPostDatabaseMockRecorder struct {
	mock *MockPostDatabase
}

// NewMockPostDatabase creates a new mock instance
func NewMockPostDatabase(ctrl *gomock.Controller) *MockPostDatabase {
	mock := &MockPostDatabase{ctrl: ctrl}
	mock.recorder = &MockPostDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostDatabase) EXPECT() *MockPostDatabaseMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockPostDatabase) Find(arg0, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockPostDatabaseMockRecorder) Find(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPostDatabase)(nil).Find), arg0, arg1, arg2)
}

// FindAll mocks base method
func (m *MockPostDatabase) FindAll() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockPostDatabaseMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPostDatabase)(nil).FindAll))
}

// Create mocks base method
func (m *MockPostDatabase) Create(arg0 *models.Post) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPostDatabaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostDatabase)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockPostDatabase) Update() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockPostDatabaseMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostDatabase)(nil).Update))
}

// Delete mocks base method
func (m *MockPostDatabase) Delete(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPostDatabaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostDatabase)(nil).Delete), arg0)
}
